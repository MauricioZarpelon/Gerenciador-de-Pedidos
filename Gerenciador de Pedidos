<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gerenciador de Pedidos</title>
    <style>
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            padding: 20px;
            color: #2d3748;
            min-height: 100vh;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
        }
        
        h1 {
            text-align: center;
            margin-bottom: 25px;
            color: #2c5282;
            font-size: 2.5rem;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.1);
        }
        
        .input-container {
            display: flex;
            justify-content: center;
            margin-bottom: 20px;
            gap: 12px;
            background: white;
            padding: 20px;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.07);
            max-width: 600px;
            margin-left: auto;
            margin-right: auto;
        }
        
        #taskInput {
            padding: 14px;
            font-size: 16px;
            border: 2px solid #e2e8f0;
            border-radius: 8px;
            flex: 1;
            transition: border-color 0.2s;
        }
        
        #taskInput:focus {
            outline: none;
            border-color: #4299e1;
            box-shadow: 0 0 0 3px rgba(66, 153, 225, 0.2);
        }
        
        #addTaskBtn {
            padding: 14px 25px;
            cursor: pointer;
            background: #4299e1;
            color: white;
            border: none;
            border-radius: 8px;
            font-weight: bold;
            transition: all 0.2s;
        }
        
        #addTaskBtn:hover {
            background: #3182ce;
            transform: translateY(-2px);
        }
        
        .controls {
            display: flex;
            justify-content: center;
            gap: 12px;
            margin-bottom: 20px;
        }
        
        #clearDataBtn {
            padding: 10px 20px;
            cursor: pointer;
            background: #e53e3e;
            color: white;
            border: none;
            border-radius: 8px;
            font-weight: bold;
            transition: all 0.2s;
        }
        
        #clearDataBtn:hover {
            background: #c53030;
            transform: translateY(-2px);
        }
        
        .board {
            display: flex;
            justify-content: space-between;
            gap: 20px;
            flex-wrap: wrap;
        }
        
        .column {
            flex: 1;
            background: #fff;
            padding: 20px;
            border-radius: 12px;
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
            min-height: 500px;
            min-width: 300px;
        }
        
        .column h2 {
            text-align: center;
            padding-bottom: 15px;
            border-bottom: 2px solid #e2e8f0;
            margin-top: 0;
            color: #4a5568;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
        }
        
        .task {
            background: #fff;
            margin: 15px 0;
            padding: 15px;
            border-radius: 8px;
            cursor: grab;
            border-left: 5px solid;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.07);
            position: relative;
            transition: all 0.2s ease;
            word-break: break-word;
        }
        
        .task:hover {
            transform: translateY(-3px);
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
        }
        
        .task.dragging {
            opacity: 0.6;
            background: #edf2f7;
            transform: rotate(5deg);
        }
        
        .delete-btn {
            position: absolute;
            top: 10px;
            right: 10px;
            background: #e53e3e;
            color: #fff;
            border: none;
            border-radius: 50%;
            cursor: pointer;
            width: 26px;
            height: 26px;
            font-size: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 0;
            opacity: 0.7;
            transition: opacity 0.2s;
        }
        
        .delete-btn:hover {
            opacity: 1;
            transform: scale(1.1);
        }
        
        .task-list {
            min-height: 350px;
        }
        
        .pedidos-em-espera .task {
            border-left-color: #e53e3e;
        }
        
        .fazer-pedido-compra .task {
            border-left-color: #f39c12;
        }
        
        .lancados .task {
            border-left-color: #38a169;
        }
        
        .empty-message {
            text-align: center;
            color: #a0aec0;
            font-style: italic;
            margin-top: 30px;
        }
        
        .stats {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin-top: 30px;
            flex-wrap: wrap;
        }
        
        .stat-box {
            background: white;
            padding: 15px 25px;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.07);
            text-align: center;
            min-width: 120px;
        }
        
        .stat-number {
            font-size: 2rem;
            font-weight: bold;
            color: #4299e1;
        }
        
        .stat-label {
            color: #718096;
            font-size: 0.9rem;
        }
        
        .success-message {
            text-align: center;
            color: #38a169;
            margin-top: 10px;
            font-weight: bold;
            height: 20px;
        }
        
        @media (max-width: 900px) {
            .board {
                flex-direction: column;
            }
            
            .column {
                min-width: auto;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üìÇ Gerenciador de Pedidos</h1>

        <div class="input-container">
            <input type="text" id="taskInput" placeholder="Digite o nome do pedido" required>
            <button id="addTaskBtn">Adicionar Pedido</button>
        </div>
        
        <div class="controls">
            <button id="clearDataBtn">Limpar Todos os Pedidos</button>
        </div>
        
        <div id="successMessage" class="success-message"></div>

        <div class="board">
            <div class="column pedidos-em-espera" data-column="pedidos-em-espera">
                <h2>‚è≥ Em Espera</h2>
                <div class="task-list" id="espera-list"></div>
            </div>

            <div class="column fazer-pedido-compra" data-column="fazer-pedido-compra">
                <h2>üìù Pedido de Compra</h2>
                <div class="task-list" id="compra-list"></div>
            </div>

            <div class="column lancados" data-column="lancados">
                <h2>‚úÖ Lan√ßados</h2>
                <div class="task-list" id="lancados-list"></div>
            </div>
        </div>

        <div class="stats">
            <div class="stat-box">
                <div class="stat-number" id="total-tasks">0</div>
                <div class="stat-label">Total de Pedidos</div>
            </div>
            <div class="stat-box">
                <div class="stat-number" id="waiting-tasks">0</div>
                <div class="stat-label">Em Espera</div>
            </div>
            <div class="stat-box">
                <div class="stat-number" id="progress-tasks">0</div>
                <div class="stat-label">Em Andamento</div>
            </div>
            <div class="stat-box">
                <div class="stat-number" id="completed-tasks">0</div>
                <div class="stat-label">Conclu√≠dos</div>
            </div>
        </div>
    </div>

    <script>
        // Inicializa√ß√£o das vari√°veis
        const taskInput = document.getElementById('taskInput');
        const addTaskBtn = document.getElementById('addTaskBtn');
        const clearDataBtn = document.getElementById('clearDataBtn');
        const successMessage = document.getElementById('successMessage');
        
        // Refer√™ncias diretas √†s listas
        const esperaList = document.getElementById('espera-list');
        const compraList = document.getElementById('compra-list');
        const lancadosList = document.getElementById('lancados-list');

        // Carregar tarefas do localStorage ou inicializar objeto vazio
        let tasks = JSON.parse(localStorage.getItem('tasks')) || {
            'pedidos-em-espera': [],
            'fazer-pedido-compra': [],
            'lancados': []
        };

        // Fun√ß√£o para salvar tarefas no localStorage
        function saveTasks() {
            localStorage.setItem('tasks', JSON.stringify(tasks));
            updateStats();
        }

        // Fun√ß√£o para limpar todos os dados
        function clearAllData() {
            if (confirm('Tem certeza que deseja limpar todos os pedidos? Esta a√ß√£o n√£o pode ser desfeita.')) {
                tasks = {
                    'pedidos-em-espera': [],
                    'fazer-pedido-compra': [],
                    'lancados': []
                };
                saveTasks();
                renderTasks();
                successMessage.textContent = 'Todos os pedidos foram removidos.';
                successMessage.style.color = '#38a169';
                
                setTimeout(() => {
                    successMessage.textContent = '';
                }, 3000);
            }
        }

        // Fun√ß√£o para atualizar as estat√≠sticas
        function updateStats() {
            const total = tasks['pedidos-em-espera'].length + 
                         tasks['fazer-pedido-compra'].length + 
                         tasks['lancados'].length;
            
            document.getElementById('total-tasks').textContent = total;
            document.getElementById('waiting-tasks').textContent = tasks['pedidos-em-espera'].length;
            document.getElementById('progress-tasks').textContent = tasks['fazer-pedido-compra'].length;
            document.getElementById('completed-tasks').textContent = tasks['lancados'].length;
        }

        // Fun√ß√£o para renderizar as tarefas na tela
        function renderTasks() {
            // Limpar todas as listas
            esperaList.innerHTML = '';
            compraList.innerHTML = '';
            lancadosList.innerHTML = '';
            
            // Preencher cada lista com suas tarefas
            renderTaskList('pedidos-em-espera', esperaList);
            renderTaskList('fazer-pedido-compra', compraList);
            renderTaskList('lancados', lancadosList);
            
            // Atualizar estat√≠sticas
            updateStats();
        }

        // Fun√ß√£o auxiliar para renderizar uma lista espec√≠fica
        function renderTaskList(taskType, listElement) {
            if (tasks[taskType].length === 0) {
                listElement.innerHTML = `<p class="empty-message">Nenhum pedido nesta categoria</p>`;
                return;
            }
            
            tasks[taskType].forEach((task, index) => {
                const taskDiv = document.createElement('div');
                taskDiv.className = 'task';
                taskDiv.draggable = true;
                taskDiv.textContent = task;

                // Bot√£o para excluir tarefa
                const deleteBtn = document.createElement('button');
                deleteBtn.textContent = 'X';
                deleteBtn.className = 'delete-btn';
                deleteBtn.title = 'Excluir pedido';
                deleteBtn.onclick = (e) => {
                    e.stopPropagation();
                    if (confirm('Tem certeza que deseja excluir este pedido?')) {
                        tasks[taskType].splice(index, 1);
                        saveTasks();
                        renderTasks();
                    }
                };

                taskDiv.appendChild(deleteBtn);

                // Eventos de arrastar
                taskDiv.addEventListener('dragstart', (e) => {
                    taskDiv.classList.add('dragging');
                    e.dataTransfer.setData('text/plain', `${taskType},${index}`);
                });

                taskDiv.addEventListener('dragend', () => {
                    taskDiv.classList.remove('dragging');
                });

                listElement.appendChild(taskDiv);
            });
        }

        // Fun√ß√£o para adicionar nova tarefa
        function addNewTask() {
            successMessage.textContent = '';
            successMessage.style.color = '#38a169';
            
            const taskName = taskInput.value.trim();
            if (taskName) {
                tasks['pedidos-em-espera'].push(taskName);
                saveTasks();
                renderTasks();
                taskInput.value = '';
                taskInput.focus();
                
                // Feedback visual
                successMessage.textContent = 'Pedido adicionado com sucesso!';
                const originalText = addTaskBtn.textContent;
                addTaskBtn.textContent = '‚úì Adicionado';
                addTaskBtn.style.background = '#38a169';
                
                setTimeout(() => {
                    addTaskBtn.textContent = originalText;
                    addTaskBtn.style.background = '#4299e1';
                    successMessage.textContent = '';
                }, 2000);
            } else {
                successMessage.textContent = 'Por favor, digite um nome para o pedido.';
                successMessage.style.color = '#e53e3e';
                
                setTimeout(() => {
                    successMessage.textContent = '';
                }, 2000);
            }
        }

        // Evento para adicionar nova tarefa ao clicar no bot√£o
        addTaskBtn.addEventListener('click', addNewTask);

        // Evento para limpar todos os dados
        clearDataBtn.addEventListener('click', clearAllData);

        // Evento para adicionar nova tarefa ao pressionar Enter
        taskInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                addNewTask();
            }
        });

        // Configurar eventos de arrastar e soltar para cada coluna
        document.querySelectorAll('.column').forEach(column => {
            column.addEventListener('dragover', (e) => {
                e.preventDefault();
                const dragging = document.querySelector('.dragging');
                if (dragging) {
                    // Efeito visual durante o arrasto
                    column.style.backgroundColor = '#f8fafc';
                }
            });

            column.addEventListener('dragleave', () => {
                column.style.backgroundColor = '#fff';
            });

            column.addEventListener('drop', (e) => {
                e.preventDefault();
                column.style.backgroundColor = '#fff';
                
                const data = e.dataTransfer.getData('text/plain').split(',');
                if (data.length === 2) {
                    const sourceCol = data[0];
                    const index = parseInt(data[1]);
                    const taskText = tasks[sourceCol][index];
                    const targetCol = column.dataset.column;

                    // Mover a tarefa para a nova coluna
                    tasks[sourceCol].splice(index, 1);
                    tasks[targetCol].push(taskText);

                    saveTasks();
                    renderTasks();
                }
            });
        });

        // Renderizar tarefas ao carregar a p√°gina
        document.addEventListener('DOMContentLoaded', function() {
            renderTasks();
        });
    </script>
</body>
</html>
